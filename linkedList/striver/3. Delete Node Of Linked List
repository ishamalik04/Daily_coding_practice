Problem statement
You are given the head of a linked list ‘list’ of size ‘N’.

Your task is to delete the linked list's last node and return the linked list's head.

Example:
Input: ‘N’ = 4, ‘list’ = 4 -> 2 -> 5 -> 1

Output: 4 2 5

Explanation: 
After deleting the last node, the Linked List is 4 -> 2 -> 5.

/**
 * Definition for singly-linked list.
 * class Node {
 * public:
 *     int data;
 *     Node *next;
 *     Node() : data(0), next(nullptr) {}
 *     Node(int x) : data(x), next(nullptr) {}
 *     Node(int x, Node *next) : data(x), next(next) {}
 * };
 */

Node *deleteLast(Node *list){
    // Write your code here
    Node*temp=list;
    while(temp->next->next!=nullptr){
        temp=temp->next;
    }
    temp->next=nullptr;
    return list;
}

Time Complexity - O(N)
Space Complexity - O(1)
