Given a linked list of 'N' nodes, which has nodes in alternating non-decreasing and non-increasing. Sort the list in non-decreasing order.

For Example:

If given linked list is 1->9->3->8->4 then it should be modified to 1->3->4->8->9.


Node *findMiddle(Node *head) {
    Node*slow=head;
    Node*fast=head->next;
    while(fast!=NULL && fast->next!=NULL){
        fast=fast->next->next;
        
        slow=slow->next;
    }
    return slow;
}

Node* merge(Node*left,Node*right){
    if(left==NULL){
        return right;
    }
    if(right==NULL){
        return left;
    }
    Node* ans=new Node(-1);
    Node*temp=ans;
    while(left!=NULL && right!=NULL){
        if(left->data < right->data){
            temp->next=left;
            temp=left;
            left=left->next;
        }
        else{
            temp->next=right;
            temp=right;
            right=right->next;
        }
    }
    while(left!=NULL){
        temp->next=left;
        temp=left;
        left=left->next;
    }
    while(right!=NULL){
        temp->next=right;
        temp=right;
        right=right->next;
    }
    ans=ans->next;
    return ans;
}

Node* mergeSort(Node*head){
     if(head==NULL || head->next==NULL){
        return head;
    }
    // breaking linked list into two halves, after finding mid 
    Node*mid=findMiddle(head);
    Node*left=head;
    Node*right=mid->next;
    mid->next=NULL;

    // recursive calls to sort both halves 
    left=mergeSort(left);
    right=mergeSort(right);

    // merging both left and right halves
    Node*result=merge(left,right);
    return result;
}

Node* sortList(Node* head){
    if(head==NULL || head->next==NULL){
        return head;
    }
  
    Node* res=mergeSort(head);
    return res;
}


Time Complexity - O(NlogN)
Space Complexity - O(NlogN)
