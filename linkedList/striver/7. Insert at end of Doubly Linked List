Problem statement
A doubly-linked list is a data structure that consists of sequentially linked nodes, and the nodes have reference to both the previous and the next nodes in the sequence of nodes.
Given a doubly-linked list and a value ‘k’, insert a node having value ‘k’ at the end of the doubly linked list.

/**
 * Definition of doubly linked list:
 *
 * struct Node {
 *      int value;
 *      Node *prev;
 *      Node *next;
 *      Node() : value(0), prev(nullptr), next(nullptr) {}
 *      Node(int val) : value(val), prev(nullptr), next(nullptr) {}
 *      Node(int val, Node *p, Node *n) : value(val), prev(p), next(n) {}
 * };
 *
 *************************************************************************/

Node * insertAtTail(Node *head, int k) {
    // Write your code here
    Node*newNode=new Node(k);
    if(head==nullptr) return newNode; 
    Node*temp=head;
    while(temp->next!=nullptr){
        temp=temp->next;
    }
    newNode->prev=temp;
    temp->next=newNode;
    return head;
}

Time Complexity - O(N)
Space Complexity - O(1)


