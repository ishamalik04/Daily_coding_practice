Problem statement
You are given two non-negative numbers 'num1' and 'num2' represented in the form of linked lists.

The digits in the linked lists are stored in reverse order, i.e. starting from least significant digit (LSD) to the most significant digit (MSD), and each of their nodes contains a single digit.

Calculate the sum of the two numbers and return the head of the sum list.



Example :
Input:
'num1' : 1 -> 2 -> 3 -> NULL
'num2' : 4 -> 5 -> 6 -> NULL

Output: 5 -> 7 -> 9 -> NULL

void insertAtTail(Node* &head, Node* &tail, int val) {
        Node* temp = new Node(val);
        //empty list
       if(head == NULL) {
            head = temp;
            tail = temp;
            return;
        }
        else
        {
            tail -> next = temp;
            tail = temp;
        }
}
    Node* add(Node* first, Node* second) {

        int carry = 0;
        Node* ansHead = NULL;

        Node* ansTail = NULL;
        while(first != NULL || second != NULL || carry != 0) {
          int val1 = 0;
            if(first != NULL)
                val1 = first -> data;
            int val2 = 0;

            if(second !=NULL)
                val2 = second -> data;
            int sum = carry + val1 + val2;   
            int digit = sum%10;       
            //create node and add in answer Linked List
            insertAtTail(ansHead, ansTail, digit);
            carry = sum/10;
            if(first != NULL)
                first = first -> next;
            if(second != NULL)
                second = second -> next;
        }
        return ansHead;
}
Node *addTwoNumbers(Node *num1, Node *num2)

{
        Node* ans = add(num1, num2);
        return ans;
}

Time Complexity - O(n+m)
Space Complexity - O(max(n,m))
