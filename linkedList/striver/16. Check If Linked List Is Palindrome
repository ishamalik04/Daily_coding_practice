Problem statement
You are given a Singly Linked List of integers. You have to return true if the linked list is palindrome, else return false.
A Linked List is a palindrome if it reads the same from left to right and from right to left.

Example:
The lists (1 -> 2 -> 1), (3 -> 4 -> 4-> 3), and (1) are palindromes, while the lists (1 -> 2 -> 3) and (3 -> 4) are not.
Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1:
1 2 2 1 -1
Sample Output 1:
True
Explanation for Sample Input 1:
The given list is a palindrome.


Node* getMiddle(Node*head){
    Node*slow=head,*fast=head;
    while(fast && fast->next){
        fast=fast->next->next;
        slow=slow->next;
    }
    return slow;
}
Node* reverseList(Node*head){
    Node*curr=head;
    Node*prev=NULL;
    Node*forward=NULL;
    while(curr!=NULL){
        forward=curr->next;
        curr->next=prev;
        prev=curr;
        curr=forward;
    }
    return prev;
}

bool isPalindrome(Node *head)
{
    // write your code here
    if(head->next==NULL) return NULL;
    Node*middle=getMiddle(head);
    Node*temp=middle->next;
    middle->next=reverseList(temp);

    Node*head1=head;
    Node*head2=middle->next;

    while(head2!=NULL){
        if(head1->data!=head2->data){
            return false;
        }
        head1=head1->next;
        head2=head2->next;
    }
    temp=middle->next;
    middle->next=reverseList(temp);
    return true;

}

Time Complexity - O(N)
Space Complexity - O(1)
