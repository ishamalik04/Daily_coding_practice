Problem statement
You are given a doubly-linked list of size 'N', consisting of positive integers. Now your task is to reverse it and return the head of the modified list.

Note:
A doubly linked list is a kind of linked list that is bidirectional, meaning it can be traversed in both forward and backward directions.
Example:

Input: 
4
4 3 2 1

This means you have been given doubly linked list of size 4 = 4 <-> 3 <-> 2 <-> 1.

Output: 
1 2 3 4


Node* reverseDLL(Node* head)
{   
    // Write your code here   
    Node*last=NULL;
    Node*curr=head;
    if(head==NULL || head->next==NULL) return head;
    while(curr!=NULL){
        last=curr->prev;
        curr->prev=curr->next;
        curr->next=last;
        curr=curr->prev;
    }
    
    return last->prev;
}


Time complexity - O(N)
Space complexity - O(1)
