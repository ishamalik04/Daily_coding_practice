You are given an array of strings arr. A string s is formed by the concatenation of a subsequence of arr that has unique characters.

Return the maximum possible length of s.

A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:

Input: arr = ["un","iq","ue"]
Output: 4
Explanation: All the valid concatenations are:
- ""
- "un"
- "iq"
- "ue"
- "uniq" ("un" + "iq")
- "ique" ("iq" + "ue")
Maximum length is 4.
Example 2:

Input: arr = ["cha","r","act","ers"]
Output: 6
Explanation: Possible longest valid concatenations are "chaers" ("cha" + "ers") and "acters" ("act" + "ers").
Example 3:

Input: arr = ["abcdefghijklmnopqrstuvwxyz"]
Output: 26
Explanation: The only string in arr has all 26 characters.



class Solution {
public:
    int maxi = 0;
    int maxLength(vector<string>& arr) {
        dfs(0, arr, "");
        return maxi;
    }
    
    void dfs(int start, vector<string> &arr, string s){
        //add all string one by one and see what the largets unique can be made
        if(!isUnique(s)) return;
        maxi = max(maxi, (int)s.size());
        
        for(int i=start; i<arr.size();i++){
            string temp = arr[i];
            dfs(i+1, arr, s+temp);
        }
    }
    
    bool isUnique(string &str){
        unordered_set<char> s;
        for(auto ch: str){
            s.insert(ch);
        }
        
        return str.size() == s.size();
    }
};
