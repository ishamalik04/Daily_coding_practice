Given an unsorted array arr[] of integers and an integer x, find the floor and ceiling of x in arr[].

Floor of x is the largest element which is smaller than or equal to x. Floor of x doesn’t exist if x is smaller than smallest element of arr[].
Ceil of x is the smallest element which is greater than or equal to x. Ceil of x doesn’t exist if x is greater than greatest element of arr[].

Return an array of integers denoting the [floor, ceil]. Return -1 for floor or ceiling if the floor or ceiling is not present.

Examples:

Input: x = 7 , arr[] = [5, 6, 8, 9, 6, 5, 5, 6]
Output: 6, 8
Explanation: Floor of 7 is 6 and ceil of 7 is 8.
Input: x = 10 , arr[] = [5, 6, 8, 8, 6, 5, 5, 6]
Output: 8, -1
Explanation: Floor of 10 is 8 but ceil of 10 is not possible.


class Solution {
  public:
    vector<int> getFloorAndCeil(int x, vector<int> &v) {
        // code here
        sort(v.begin(),v.end());
        int n=v.size();
        int low=0,high=n-1,mid,floorV=-1,ceilV=-1;
        while(low<=high){
            mid=(low+high)/2;
            if(v[mid]<=x){
                floorV=v[mid];
                low=mid+1;
            }
            else{
                high=mid-1;
            }
        }
        low=0,high=n-1;
        while(low<=high){
            mid=(low+high)/2;
            if(v[mid]>=x){
                ceilV=v[mid];
                high=mid-1;
            }
            else{
                low=mid+1;
            }
        }
        vector<int>ans;
        ans.push_back(floorV);
        ans.push_back(ceilV);
        return ans;
    
    }
};
