Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]


class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        // brute force 
        int first=-1,last=-1;
        int n=nums.size();
        for(int i=0;i<n;i++){
            if(nums[i]==target){
                if(first==-1) first=i;
                last=i;
            }
        }
        vector<int>ans;
        ans.push_back(first);
        ans.push_back(last);
        return ans;


        // using binary search
        int n=nums.size();
        int low=0,high=n-1,first=-1,mid;
        while(low<=high){
            mid=(low+high)/2;
            if(nums[mid]==target){
                first=mid;
                high=mid-1;
            }
            else if(nums[mid]<target){
                low=mid+1;
            }
            else{
                high=mid-1;
            }
        }
        int last=-1;
        low=0,high=n-1;
        while(low<=high){
            mid=(low+high)/2;
            if(nums[mid]==target){
                last=mid;
                low=mid+1;
            }
            else if(nums[mid]<target){
                low=mid+1;
            }
            else{
                high=mid-1;
            }
        }
        vector<int>ans;
        ans.push_back(first);
        ans.push_back(last);
        return ans;
    }
};
