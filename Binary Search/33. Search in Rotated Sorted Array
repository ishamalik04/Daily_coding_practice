There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
Example 3:

Input: nums = [1], target = 0
Output: -1


class Solution {
public:
    int search(vector<int>& nums, int target) {
        // brute force
        for(int i=0;i<nums.size();i++){
            if(nums[i]==target){
                return i;
            }
        }
        return -1;


        // optimal using binary search

        int n=nums.size();
        int low=0,high=n-1,mid;
        while(low<=high){
           mid=(low+high)/2;
        //    if mid point is the target
           if(nums[mid]==target){
            return mid;
           }

        //    checking if left part is sorted 
            if(nums[low]<=nums[mid]){
                if(nums[low]<= target && target<=nums[mid]){
                    // element exists
                    high=mid-1;
                }
                else{
                    // element does not exist 
                    low=mid+1;
                }
            }
            else{
                // if right part is sorted
                if(nums[mid]<=target && target<=nums[high]){
                    // element exists
                    low=mid+1;
                }
                else{
                    // element does not exist
                    high=mid-1;
                }
            }
        }
        return -1;
    }
};
