Given an increasing sorted rotated array arr of distinct integers. The array is right-rotated k times. Find the value of k.
Let's suppose we have an array arr = [2, 4, 6, 9], so if we rotate it by 2 times so that it will look like this:
After 1st Rotation : [9, 2, 4, 6]
After 2nd Rotation : [6, 9, 2, 4]

Examples:

Input: arr = [5, 1, 2, 3, 4]
Output: 1
Explanation: The given array is 5 1 2 3 4. The original sorted array is 1 2 3 4 5. We can see that the array was rotated 1 times to the right.
Input: arr = [1, 2, 3, 4, 5]
Output: 0
Explanation: The given array is not rotated.


class Solution {
  public:
    int findKRotation(vector<int> &nums) {
        // Code Here
        int n=nums.size();
        int low=0,high=n-1;
        int ans=INT_MAX,mid,index=-1;
        while(low<=high){
            mid=(low+high)/2;
            if(nums[low]<=nums[high]){
               if(nums[low]<ans){
                   ans=nums[low];
                   index=low;
               }
                break;
            }
            // if left part is sorted
            if(nums[low]<=nums[mid]){
                if(nums[low]<ans){
                    ans=nums[low];
                    index=low;
                }
                // eliminating left half
                low=mid+1;
            }
            else{
                // if right part is sorted
                if(nums[mid]<=ans){
                    ans=nums[mid];
                    index=mid;
                }
                // eliminating right half
                high=mid-1;
            }
        }
        return index;
    }
};
