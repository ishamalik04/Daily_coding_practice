You are given a sorted array consisting of only integers where every element appears exactly twice,
 except for one element which appears exactly once.

Return the single element that appears only once.

Your solution must run in O(log n) time and O(1) space.

 

Example 1:

Input: nums = [1,1,2,3,3,4,4,8,8]
Output: 2
Example 2:

Input: nums = [3,3,7,7,10,11,11]
Output: 10

class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        // brute force
        int n=nums.size();
        if(n==1) return nums[0];

        for(int i=0;i<n;i++){
            // checking for first index
            if(i==0){
                if(nums[i]!=nums[i+1]){
                    return nums[i];
                }
            }
            // checking for last index
            else if(i==n-1){
                if(nums[i]!=nums[i-1]){
                    return nums[i];
                }
            }
            else{
                if(nums[i]!=nums[i-1] && nums[i]!=nums[i+1]){
                    return nums[i];
                }
            }
        }
        return -1;


        // better using xor
        int ans=0;
        for(int i=0;i<n;i++){
            ans=ans^nums[i];
        }
        return ans;

        // optimal using binary search


        // edge cases
        if(n==1) return nums[0];
        if(nums[0]!=nums[1]) return nums[0];
        if(nums[n-1]!=nums[n-2]) return nums[n-1];

        int low=1,high=n-2,mid;
        while(low<=high){
             mid=(low+high)/2;

            // checking if nums[mid] is the single element
            if(nums[mid]!=nums[mid+1] && nums[mid]!=nums[mid-1]){
                return nums[mid];
            }

            // we are on left
            if((mid%2==1 && nums[mid]==nums[mid-1]) || (mid%2==0 && nums[mid]==nums[mid+1])){
                // eliminating the left half
                low=mid+1;
            }

            // we are on right
            else{
                high=mid-1;
            }
        }
        return -1;
    }
};
