Problem statement
Given an undirected and disconnected graph G(V, E), containing 'V' vertices and 'E' edges, the information about edges is given using 'GRAPH' matrix, where i-th edge is between GRAPH[i][0] and GRAPH[i][1]. print its DFS traversal.

V is the number of vertices present in graph G and vertices are numbered from 0 to V-1. 

E is the number of edges present in graph G.
Note :
The Graph may not be connected i.e there may exist multiple components in a graph.


void dfs(int node,vector<vector<int>>&adjList,vector<int>&vis,vector<int>&ans){
    vis[node]=1;
    ans.push_back(node);
    for(auto it:adjList[node]){
        if(!vis[it]){
            dfs(it,adjList,vis,ans);
        }
    }
}

vector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int>> &edges)
{
    vector<vector<int>>adjList(V);
    for(int i=0;i<E;i++){
        int u=edges[i][0];
        int v=edges[i][1];
        adjList[u].push_back(v);
        adjList[v].push_back(u);
    }

    vector<int>vis(V,0);
    vector<vector<int>>res;
    for(int i=0;i<V;i++){
        if(!vis[i]){
            vector<int>ans;
            dfs(i,adjList,vis,ans);
            res.push_back(ans);
        }
    }
    return res;
}
