Problem statement
An 'IMAGE' is represented by the 2-D array of positive integers, where each element of 2-D represents the pixel value of the image.
The given 'IMAGE' has 'N' rows and 'M' columns. You are given the location of the pixel in the image as ('X', 'Y')(0-based indexing) and a pixel value as 'P'.
Your task is to perform a “flood fill” operation on the given coordinate (X, Y) with pixel value 'P'.
Let the current pixel value of ('X', 'Y') be equal to C. To perform the flood fill operation on the coordinate (X, Y) with pixel value 'P' you need to do the following operations in order:
1. Replace the pixel value of ('X', 'Y') with 'P'.
2. Visit all non-diagonal neighbours of ('X', 'Y') having pixel values equal to C and replace their pixel value with 'P'.
3. Non – diagonal neighbours are Up('X' - 1, 'Y'), Down('X' + 1, 'Y'), Left('X', 'Y' - 1), right('X', 'Y' + 1). Also, you cannot go out of bounds.
4. Visit all non-diagonals neighbours of coordinates visited in step 2 having pixel value equal to C and replace their pixel value with 'P'. 
5. Repeat step 2, until you have visited all your neighbours

For Example:
For  'N' = 5 , 'M' = 4 , 'X' = 2 , 'Y' = 2 and 'P' = 5
Given 'IMAGE' is shown below:

[7, 1, 1, 1]
[1, 7, 7, 7]
[7, 7, 7, 0]
[7, 7, 7, 4]
[4, 4, 4, 4]

After the flood fill operation, we will replace all neighbour's 7s with 5.

So our 'IMAGE' will become:

[7, 1, 1, 1]
[1, 5, 5, 5]
[5, 5, 5, 0]
[5, 5, 5, 4]
[4, 4, 4, 4]


Solution:


void dfs(int x,int y,vector<vector<int>> &ans,vector<vector<int>> &image,int p,int delRow[],int delCol[],int n,int m,int ini){
    ans[x][y]=p;
    for(int i=0;i<4;i++){
        int newR=x+delRow[i];
        int newC=y+delCol[i];

        if(newR>=0 && newR<n && newC>=0 && newC<m && image[newR][newC]==ini && ans[newR][newC]!=p){
            dfs(newR,newC,ans,image,p,delRow,delCol,n,m,ini);
        }
    }
}

vector<vector<int>> floodFill(vector<vector<int>> &image, int n, int m, int x, int y, int p) {
   int initial=image[x][y];
   vector<vector<int>>ans=image;
   int delRow[]={0,-1,0,1};
   int delCol[]={-1,0,1,0};
   dfs(x,y,ans,image,p,delRow,delCol,n,m,initial);
   return ans;
}
