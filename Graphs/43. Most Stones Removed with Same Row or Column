Problem statement
On a 2-D plane, we place 'n' stones at some integer coordinate points. Each coordinate point may have at most one stone.
A stone can be removed if it shares either the same row or the same column as another stone that has not been removed.
You are given an array 'stones' of length 'n' where 'stones[i]' = '[ri, ci]' represent the ith stoneâ€™s location i.e 'ri' is the row coordinate of the 'ith' stone
and 'ci' is the column coordinate of the 'ith' stone. Your task is to return the largest possible number of stones that can be removed.
Example:
Input: 'stones' = [[0,1] [1,0] [0,0]]
Output: 2
Explanation:
We can remove the 1st stone at [0,1] as it has the same row as the 3rd stone [0, 0]. And remove the 2nd stone because it has the same column [0,1]
as the 3rd stone.



#include<bits/stdc++.h>
class DisjointSet{
	public:
	vector<int>parent,rank,size;
	DisjointSet(int n){
		rank.resize(n+1,0);
        size.resize(n+1,1);
		parent.resize(n+1);

		for(int i=0;i<n;i++){
			parent[i]=i;
			size[i]=1;
		}
	}

	int findUpar(int node){
		if(node==parent[node]){
			return node;
		}
		// compressing path
		return parent[node]=findUpar(parent[node]);
	}

	void unionByRank(int u,int v){
		// if ultimate parent same , don't join
		int ulp_u=findUpar(u);
		int ulp_v=findUpar(v);

		if(ulp_u==ulp_v){
			return;
		}
		if(rank[ulp_u]<rank[ulp_v]){
			parent[ulp_u]=ulp_v;
		}else if(rank[ulp_v]<rank[ulp_u]){
			parent[ulp_v]=ulp_u;
		}else{
			parent[ulp_v]=ulp_u;
			rank[ulp_u]++;
		}
	}

	void unionBySize(int u,int v){
		// if ultimate parent same , don't join
		int ulp_u=findUpar(u);
		int ulp_v=findUpar(v);

		if(ulp_u==ulp_v){
			return;
		}
		if(size[ulp_u]<rank[ulp_v]){
			parent[ulp_u]=ulp_v;
			size[ulp_v]+=size[ulp_u];
		}else{
			parent[ulp_v]=ulp_u;
			size[ulp_u]+=size[ulp_v];
		}
	}
};
int removeStones(vector<vector<int>> &stones){
	int maxRow=0;
	int maxCol=0;
	for(auto it:stones){
		maxRow=max(maxRow,it[0]);
		maxCol=max(maxCol,it[1]);
	}
	DisjointSet ds(maxRow+maxCol+1);
	unordered_map<int,int>stoneNodes;
	for(auto it:stones){
		int nodeRow=it[0];
		int nodeCol=it[1]+maxRow+1;
		ds.unionBySize(nodeRow,nodeCol);
		stoneNodes[nodeRow]=1;
		stoneNodes[nodeCol]=1;
	}
	int cnt=0;
	for(auto it:stoneNodes){
		if(ds.findUpar(it.first)==it.first){
			cnt++;
		}
	}
	return stones.size()-cnt;
}














