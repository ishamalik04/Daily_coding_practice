Problem statement
You have been given a graph consisting of ‘N’ vertices numbered from 1 to ‘N’. The graph has ‘M’ edges. In an operation,
you can shift an edge between two directly connected vertices to between pair of disconnected vertices to make them directly connected.
Return the minimum number of operations to make the graph connected. If it is not possible to make graph connected return -1.


class DisjointSet{
	public:
	vector<int>parent,rank,size;
	DisjointSet(int n){
		rank.resize(n+1,0);
        size.resize(n+1,1);
		parent.resize(n+1);

		for(int i=0;i<n;i++){
			parent[i]=i;
			size[i]=1;
		}
	}

	int findUpar(int node){
		if(node==parent[node]){
			return node;
		}
		// compressing path
		return parent[node]=findUpar(parent[node]);
	}

	void unionByRank(int u,int v){
		// if ultimate parent same , don't join
		int ulp_u=findUpar(u);
		int ulp_v=findUpar(v);

		if(ulp_u==ulp_v){
			return;
		}
		if(rank[ulp_u]<rank[ulp_v]){
			parent[ulp_u]=ulp_v;
		}else if(rank[ulp_v]<rank[ulp_u]){
			parent[ulp_v]=ulp_u;
		}else{
			parent[ulp_v]=ulp_u;
			rank[ulp_u]++;
		}
	}

	void unionBySize(int u,int v){
		// if ultimate parent same , don't join
		int ulp_u=findUpar(u);
		int ulp_v=findUpar(v);

		if(ulp_u==ulp_v){
			return;
		}
		if(size[ulp_u]<rank[ulp_v]){
			parent[ulp_u]=ulp_v;
			size[ulp_v]+=size[ulp_u];
		}else{
			parent[ulp_v]=ulp_u;
			size[ulp_u]+=size[ulp_v];
		}
	}
};
int makeGraphConnected(int n, vector < pair < int,int > > edges, int m) 
{
	DisjointSet ds(n);
	int cntExtra=0;
	// counting extra edges
	for(auto it:edges){
		int u=it.first;
		int v=it.second;
		if(ds.findUpar(u)==ds.findUpar(v)){
			cntExtra++;
		}else{
			ds.unionBySize(u,v);
		}
	}
	int cntC=0;
	// counting connected components
	for(int i=0;i<n;i++){
		if(ds.parent[i]==i){
			cntC++;
		}
	}
	int ans=cntC-1;
	if(cntExtra>=ans) return ans;
	return -1;       
}
