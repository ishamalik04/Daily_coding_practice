Problem statement
A minimum spanning tree is a subset of the edges of a connected, edge-weighted undirected graph 
that connects all the vertices without any cycles and with the minimum possible total edge weight.

A spanning treeâ€™s weight is the sum of the weights of each edge in the spanning tree.
You have been given a connected undirected weighted graph having 'n' vertices, from 1 to 'n', and 'm' edges.
You are given an array 'edges' of size 'm', containing the details of the edges of the graph.
Each element of 'edges' contains three integers, the two vertices that are being connected and the weight of the edge.

Find the weight of the minimum spanning tree of the given graph.

class DisjointSet{
	vector<int>parent,rank,size;
	public:
	DisjointSet(int n){
		rank.resize(n+1,0);
        size.resize(n+1,1);
		parent.resize(n+1);

		for(int i=0;i<n;i++){
			parent[i]=i;
			size[i]=1;
		}
	}

	int findUpar(int node){
		if(node==parent[node]){
			return node;
		}
		// compressing path
		return parent[node]=findUpar(parent[node]);
	}

	void unionByRank(int u,int v){
		// if ultimate parent same , don't join
		int ulp_u=findUpar(u);
		int ulp_v=findUpar(v);

		if(ulp_u==ulp_v){
			return;
		}
		if(rank[ulp_u]<rank[ulp_v]){
			parent[ulp_u]=ulp_v;
		}else if(rank[ulp_v]<rank[ulp_u]){
			parent[ulp_v]=ulp_u;
		}else{
			parent[ulp_v]=ulp_u;
			rank[ulp_u]++;
		}
	}

	void unionBySize(int u,int v){
		// if ultimate parent same , don't join
		int ulp_u=findUpar(u);
		int ulp_v=findUpar(v);

		if(ulp_u==ulp_v){
			return;
		}
		if(size[ulp_u]<rank[ulp_v]){
			parent[ulp_u]=ulp_v;
			size[ulp_v]+=size[ulp_u];
		}else{
			parent[ulp_v]=ulp_u;
			size[ulp_u]+=size[ulp_v];
		}
	}
};

int kruskalMST(int n, vector<vector<int>> &edges)
{
	vector<pair<int,pair<int,int>>>ds;
	int mst=0;
	for(auto it:edges){
		int u=it[0];
		int v=it[1];
		int wt=it[2];

                ds.push_back({wt, {u, v}});
        }

	// sorting ds
	sort(ds.begin(),ds.end());
	DisjointSet dis(n);

	for(auto it:ds){
		int wt=it.first;
		int u=it.second.first;
		int v=it.second.second;

		if(dis.findUpar(u)!=dis.findUpar(v)){
			mst+=wt;
			dis.unionByRank(u,v);
		}
	}
	return mst;
}
