Problem statement
You are given an undirected graph with 'N' nodes and 'M' edges. The weight of each edge in the graph is one unit.
Given a source vertex 'src', you must return an array 'answer' of length 'N', where 'answer[i]' is the shortest path length
between the source vertex 'src' and 'i'th vertex.
Note:
All the nodes are zero-based.
Example:
Input:
N=5, M=5, edges=[(0, 1), (1, 4), (2, 3), (2, 4), (3, 4)], src=1 
Output: 1 0 2 2 1

vector<int> shortestPath(int n, vector<vector<int>>&edges, int src) {
    // creating adjacency list 
    vector<int>adj[n+1];
    for(auto it:edges){
        adj[it[0]].push_back(it[1]);
        adj[it[1]].push_back(it[0]);
    }
    // creating distance array with all weights assigned to infinity and src wt to 0 
    vector<int>dist(n,1e9);
    dist[src]=0;
    // pushing src weight and its node to queue 
    queue<int>q;
    q.push(src);
    while(!q.empty()){
        int node=q.front();
        q.pop();
        // realxing all adjacent nodes edges 
        for(auto it:adj[node]){
            int v=it;
            if(dist[node]+1<dist[v]){
                dist[v]=dist[node]+1;
                q.push(it);
            }
        }
    }
    for(int i=0;i<n;i++){
        if(dist[i]==1e9){
            dist[i]=-1;
        }
    }
    return dist;
}
