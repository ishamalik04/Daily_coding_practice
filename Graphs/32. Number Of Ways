Problem statement
You are given a connected graph of 'N' nodes (0 to N-1) and 'M' bidirectional weighted edges.
Return the number of ways in which you can reach 'N'-1 from 0 in the shortest amount of time(sum of weights in the path).
Since the answer may be large, return it modulo 10^9+7.
For Example:
'N'=3, 'M'=3, edges=[[0, 1, 3], [0, 2, 7], [1, 2, 4]].
Path 0->1->2=3+4=7.
Path 0->2=7.
So our answer is 2, as 7 is the shortest amount of time.

int numberOfWays(int n, int m, vector<vector<int>> edges)
{
        vector<pair<int,int>>adj[n];
        for(auto it:edges){
           adj[it[0]].push_back({it[1],it[2]});
           adj[it[1]].push_back({it[0], it[2]});
        }
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
        vector<int>dist(n,1e9),ways(n,0);
        dist[0]=0;
        ways[0]=1;
        pq.push({0,0});
        int mod=(int)(1e9+7);
        while(!pq.empty()){
            int dis=pq.top().first;
            int node=pq.top().second;
            pq.pop();
            for(auto it:adj[node]){
                int adjNode=it.first;
                int edw=it.second;
                if(dist[node]+edw<dist[adjNode]){
                    dist[adjNode]=dis+edw;
                    pq.push({dis+edw,adjNode});
                    ways[adjNode]=ways[node];
                }else if(dist[node]+edw==dist[adjNode]){
                    ways[adjNode]=(ways[adjNode]+ways[node])%mod;
                }
            }
        }
    return ways[n-1];
}
