Problem statement
You have been given a non-empty grid consisting of only 0s and 1s. You have to find the number of islands in the given grid.
An island is a group of 1s (representing land) connected horizontally, vertically or diagonally. You can assume that all four edges of the grid are surrounded by 0s (representing water).

#include <bits/stdc++.h> 

void bfs(int row,int col,vector<vector<int>>&visited,vector<vector<int>> &grid,int n,int m){
	visited[row][col]=1;
	queue<pair<int,int>>q;
	q.push({row,col});
	while(!q.empty()){
		int r=q.front().first;
		int c=q.front().second;
		q.pop();
		for(int i=-1;i<=1;i++){
			for(int j=-1;j<=1;j++){
				int newR=r+i;
				int newC=c+j;
				if(newR>=0 && newR<n && newC>=0 && newC<m && grid[newR][newC]==1 && !visited[newR][newC]){
					visited[newR][newC]=1;
					q.push({newR,newC});
				}
			}
		}
	}
}

int numberOfIslands(vector<vector<int>> &grid, int n, int m)
{
	vector<vector<int>>visited(n,vector<int>(m,0));
	int ans=0;
	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){
			if(!visited[i][j] && grid[i][j]==1){
				ans++;
				bfs(i,j,visited,grid,n,m);
			}
		}
	}
	return ans;
}

