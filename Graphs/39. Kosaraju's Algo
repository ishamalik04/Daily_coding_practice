Given a Directed Graph with V vertices (Numbered from 0 to V-1) and E edges,
Find the number of strongly connected components in the graph.

A component is called a Strongly Connected Component(SCC) only if for every possible pair of vertices (u, v) inside that component,
u is reachable from v and v is reachable from u.

class Solution
{
	public:
	void dfs(int node,vector<int>&visited,vector<vector<int>>&adj,stack<int>&st){
	    visited[node]=1;
	    for(auto it:adj[node]){
	        if(!visited[it]){
	            dfs(it,visited,adj,st);
	        }
	    }
	    st.push(node);
	}
	void dfs3(int node,vector<int>&visited,vector<vector<int>>&adjT){
	    visited[node]=1;
	    for(auto it:adjT[node]){
	        if(!visited[it]){
	            dfs3(it,visited,adjT);
	        }
	    }
	}
	//Function to find number of strongly connected components in the graph.
    int kosaraju(int V, vector<vector<int>>& adj)
    {
        vector<int>visited(V,0);
        stack<int>st;
        for(int i=0;i<V;i++){
            if(!visited[i]){
                dfs(i,visited,adj,st);
            }
        }
        vector<vector<int>>adjT(V);
        // reversing the edges 
        for(int i=0;i<V;i++){
            visited[i]=0;
            for(auto it:adj[i]){
                adjT[it].push_back(i);
            }
        }
        int ans=0;
        while(!st.empty()){
            int node=st.top();
            st.pop();
            if(!visited[node]){
                ans++;
                dfs3(node,visited,adjT);
            }
        }
        return ans;
    }
};
