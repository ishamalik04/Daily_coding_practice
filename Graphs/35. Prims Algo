Minimum Spanning Tree
Problem statement
You are given an undirected, connected and weighted graph G(V, E), consisting of V number of vertices (numbered from 0 to V-1) and E number of edges.

Find and print the total weight of the Minimum Spanning Tree (MST) using Kruskal's algorithm.

By definition, a minimum weight spanning tree is a subset of the edges of a connected, edge-weighted undirected graph that connects all the vertices together,
without any cycles and with the minimum possible total edge weight.


#include<bits/stdc++.h>
int minimumSpanningTree(vector<vector<int>>& edges, int n)
{
  // creating adjacency list 
  vector<vector<pair<int,int>>>adj(n);
  for(auto it:edges){
    int u=it[0];
    int v=it[1];
    int w=it[2];

    adj[u].push_back({w,v});
    adj[v].push_back({w,u});
  }

  // creating priority queue to store {w,u}
  priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
  pq.push({0,0});
  // creating visited array
  vector<int>vis(n,0);
  int sum=0;
  while(!pq.empty()){
    auto it=pq.top();
    pq.pop();
    int node=it.second;
    int wt=it.first;

    if(vis[node]) continue;
    vis[node]=1;
    sum+=wt;
    // traversing neighbouring nodes
    for(auto i:adj[node]){
      int adjNode=i.second;
      int edw=i.first;
      if(!vis[adjNode]){
        pq.push({edw,adjNode});
      }
    }
  }
  return sum;

}
