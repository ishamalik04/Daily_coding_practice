Given a string of lowercase alphabets, count all possible substrings (not necessarily distinct) that have exactly k distinct characters. 
Example 1:
Input: S = "aba", K = 2
Output:3
Explanation:The substrings are: "ab", "ba" and "aba".

Input: S = "abaaca", K = 1
Output: 7
Explanation: The substrings are: "a", "b", "a", "aa", "a", "c", "a". 

class Solution
{
  public:
  
    long long upto(string str,int k){
        vector<int>mp(26,0);
        int l=0,r=0,cnt=0,ans=0;
        while(r<str.size()){
            mp[str[r]-'a']++;
            if(mp[str[r]-'a']==1)
            cnt++;
            while(cnt>k){
                mp[str[l]-'a']--;
                if(mp[str[l]-'a']<=0)
                cnt--;
                l++;
            }
            ans+=r-l+1;
            r++;
        }
        return ans;
    }
    long long int substrCount (string s, int k) {
    	return upto(s,k)-upto(s,k-1);
    }
};
