// implementation of doubly ended queue
#include<bits/stdc++.h>
using namespace std;
class Deque {
    int *arr;
    int front;
    int rear;
    int size;
    public:
    Deque(int n)
    {
        size=n;
        arr=new int[n];
        front=-1;
        rear=-1;
    }
    
    bool pushFront(int x)
    {
        if((front==0 && rear==size-1) || (rear==(front-1)%(size-1)))
        {
            cout<<"queue is full"<<endl;
            return false;
        }
        else if(front==-1)
        {
            front=0;
            rear=0;
        }
         else if(front==0 && rear!=size-1)
        {
            front=n-1;
        }
        else
        {
            front--;
        }
        arr[front]=x;
        return true;
    }
    
    bool pushBack(int x)
    {
        if((front==0 && rear==size-1) || (rear=(front-1)%(size-1)))
        {
            return false;
        }
        else if(front==-1)
        {
            front=rear=0;
        }
        else if(rear==size-1 && front!=0)
        {
            rear=0;
        }
        else
        {
            rear++;
        }
        arr[rear]=x;
        return true;
    }
    
    
    int popRear()
    {
        if(front==-1)
        {
            return -1;
        }
        int ans=arr[rear];
        arr[rear]=-1;
        if(front==rear)
        {
            front=-1;
            rear=-1;
        }
        else if(rear==0)
        {
            rear=size-1;
        }
        else
        {
            rear--;
        }
        return ans;
    }
    
    
    int popFront()
    {
        if(front==-1)
        {
            cout<<"empty queue"<<endl;
            return -1;
        }
        int ans=arr[front];
        arr[front]=-1;
        if(front==rear)
        {
            front=rear=-1;
        }
        else if(front ==size-1)
        {
            front=0;
        }
        else
        {
            front++;
        }
        return ans;
    }
    int front()
    {
        if(front==rear)
        {
            return -1;
        }
        else
        {
            return arr[front];
        }
    }
    bool isempty()
    {
        if(front==rear)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    int getRear()
    {
        if(isempty())
        {
            return -1;
        }
        return arr[rear];
    }
}






















