Geek is going for n days training program, he can perform any one of these three activities Running, Fighting, and Learning Practice.
Each activity has some point on each day. as Geek wants to improve all his skills, he can't do the same activity on two consecutive days,
help Geek to maximize his merit points as we were given a 2D array of n*3 points corresponding to each day and activity.

Example:
Input:
n = 3
point= [[1,2,5],[3,1,1],[3,3,3]]
Output:
11
Explanation:
Geek will learn a new move and earn 5 point then on second
day he will do running and earn 3 point and on third day
he will do fighting and earn 3 points so, maximum point is 11.


class Solution {
  public:
    int f(int day,int last,vector<vector<int>>&points,vector<vector<int>>&dp){
        if(day==0){
            int maxi=0;
            for(int task=0;task<3;task++){
                if(task!=last){
                    maxi=max(maxi,points[0][task]);
                }
            }
            return maxi;
        }
        if(dp[day][last]!=-1) return dp[day][last];
        int maxi=0;
        for(int task=0;task<3;task++){
            if(task!=last){
                int point=points[day][task]+f(day-1,task,points,dp);
                maxi=max(maxi,point);
            }
        }
        return dp[day][last]=maxi;
    }
    int maximumPoints(vector<vector<int>>& points, int n) {
        vector<vector<int>>dp(n,vector<int>(4,-1));
        return f(n-1,3,points,dp);
    }
};

int maximumPoints(vector<vector<int>>& points, int n) {
        vector<vector<int>>dp(n,vector<int>(4,0));
        dp[0][0]=max(points[0][1],points[0][2]);
        dp[0][1]=max(points[0][0],points[0][2]);
        dp[0][2]=max(points[0][0],points[0][1]);
        dp[0][3]=max(points[0][0],max(points[0][2],points[0][1]));
        
        for(int day=1;day<n;day++){
            for(int last=0;last<4;last++){
                dp[day][last]=0;
                for(int task=0;task<3;task++){
                    if(task!=last){
                        int point=max(dp[day][last],points[day][task]+dp[day-1][task]);
                        dp[day][last]=max(point,dp[day][last]);
                    }
                }
            }
        }
        return dp[n-1][3];
    }
    
    // Space Optimisation
    
    int maximumPoints(vector<vector<int>>& points, int n) {
        vector<int>prev(4,0);
        prev[0]=max(points[0][1],points[0][2]);
        prev[1]=max(points[0][0],points[0][2]);
        prev[2]=max(points[0][0],points[0][1]);
        prev[3]=max(points[0][0],max(points[0][2],points[0][1]));
        
        for(int day=1;day<n;day++){
            vector<int>temp(4,0);
            for(int last=0;last<4;last++){
                temp[last]=0;
                for(int task=0;task<3;task++){
                    if(task!=last){
                        int point=points[day][task]+prev[task];
                        temp[last]=max(temp[last],point);
                    }
                }
            }
            prev=temp;
        }
        return prev[3];
    }
