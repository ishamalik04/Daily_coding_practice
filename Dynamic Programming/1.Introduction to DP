When given an integer n, where n is based on a 0-based index, find the nth Fibonacci number.
Every ith number in the series equals the sum of the (i-1)th and (i-2)th numbers, where the first and second numbers are specified as 0 and 1, respectively.
For the given issue, code both top-down and bottom-up approaches.
As the answer might be large, return the final answer modulo 109 + 7
Example 1:
Input:
n = 5
Output: 5
Explanation: 0,1,1,2,3,5 as we can see 5th number is 5.


class Solution {
  public:
    long long int mod=1e9+7;
    long long int solve(int n,vector<long long int>&dp){
        if(n==0) return dp[0]=0;
        if(n==1) return dp[1]=1;
        if(dp[n]!=-1) return dp[n];
        return (dp[n]=solve(n-1,dp)+solve(n-2,dp))%mod;
    }
    long long int topDown(int n) {
        vector<long long int>dp(n+1,-1);
        return solve(n,dp);
    }
    long long int bottomUp(int n) {
        vector<long long int>dp(n+1,0);
        dp[0]=0;
        dp[1]=1;
        for(int i=2;i<=n;i++){
            dp[i]=(dp[i-1]+dp[i-2])%mod;
        }
        return dp[n]%mod;
    }
};
