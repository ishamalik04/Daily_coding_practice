Given an integer array nums, return true if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or false otherwise.

Example 1:
Input: nums = [1,5,11,5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].

Example 2:
Input: nums = [1,2,3,5]
Output: false
Explanation: The array cannot be partitioned into equal sum subsets.

// memoisation
class Solution {
public:

 bool fun(int index,int target,vector<int>&arr,vector<vector<int>>&dp){
        // base cases
        if(target==0) return true;
        if(index==0) return arr[index]==target;
        
        // dp condition check
        if(dp[index][target]!=-1) return dp[index][target];
        
        // conditions
        bool notTake=fun(index-1,target,arr,dp);
        bool take=false;
        if(target>=arr[index]){
            take=fun(index-1,target-arr[index],arr,dp);
        }
        return dp[index][target]=notTake || take;
    }

    bool isSubsetSum(vector<int>arr, int sum){
        int n=arr.size();
        vector<vector<int>>dp(n,vector<int>(sum+1,-1));
        return fun(n-1,sum,arr,dp);
    }
    bool canPartition(vector<int>& nums) {
        int totalSum=0;
        for(int i=0;i<nums.size();i++){
            totalSum+=nums[i];
        }
        if(totalSum%2==1) return false;
        int target=totalSum/2;
        if(isSubsetSum(nums,target)==true) return true;
        return false;
    }
};

//tabulation

class Solution {
public:

    bool isSubsetSum(vector<int>arr, int sum){
        int n=arr.size();
        vector<vector<bool>>dp(n,vector<bool>(sum+1,-1));
        for(int i=0;i<n;i++)
        dp[i][0]=true;

        dp[0][arr[0]]=true;

        for(int ind=1;ind<=n;ind++){
            for(int target=1;target<=sum;target++){
            bool notTake=dp[ind-1][sum];
            bool take=false;
            if(sum>=arr[ind]){
            take=dp[ind-1][sum-arr[ind]];
            }
            return  dp[ind][sum]=take||notTake;
        }
        }
        return dp[n-1][sum];
    }
    bool canPartition(vector<int>& nums) {
        int totalSum=0;
        for(int i=0;i<nums.size();i++){
            totalSum+=nums[i];
        }
        if(totalSum%2==1) return false;
        int target=totalSum/2;
        if(isSubsetSum(nums,target)==true) return true;
        return false;
    }
};
