Given an array arr of size n of non-negative integers and an integer sum, the task is to count all subsets of the given array with a sum equal to a given sum.
Note: Answer can be very large, so, output answer modulo 109+7.

Examples:
Input: 
n = 6, arr = [5, 2, 3, 10, 6, 8], sum = 10
Output: 
3
Explanation: 
{5, 2, 3}, {2, 8}, {10} are possible subsets.

Input: 
n = 5, arr = [2, 5, 1, 4, 3], sum = 10
Output: 
3
Explanation: 
{2, 1, 4, 3}, {5, 1, 4}, {2, 5, 3} are possible subsets.

class Solution{
    
	public:
	const long long mod = 1e9+7;
	
	int fun(int index,int target,int arr[],vector<vector<int>>&dp){
	    if(index==0){
	    if(target==0 && arr[0]==0) return 2;
	    if(target==0 || arr[0]==target) return 1;
	    
	    return 0;
	    }
	    
	    if(dp[index][target]!=-1) return dp[index][target];
	    
	    int notTake=(fun(index-1,target,arr,dp))%mod;
	    int take=false;
	    if(arr[index]<=target){
	        take=fun(index-1,target-arr[index],arr,dp)%mod;
	    }
	    
	    return dp[index][target]=(take+notTake)%mod;
	}
	int perfectSum(int arr[], int n, int sum)
	{
        vector<vector<int>>dp(n,vector<int>(sum+1,-1));
        return fun(n-1,sum,arr,dp);
	}
	  
};
