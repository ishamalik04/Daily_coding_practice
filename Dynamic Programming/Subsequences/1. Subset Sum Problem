Given an array of non-negative integers, and a value sum, determine if there is a subset of the given set with sum equal to given sum. 

Example 1:
Input:
N = 6
arr[] = {3, 34, 4, 12, 5, 2}
sum = 9
Output: 1 
Explanation: Here there exists a subset with
sum = 9, 4+3+2 = 9.

Example 2:
Input:
N = 6
arr[] = {3, 34, 4, 12, 5, 2}
sum = 30
Output: 0 
Explanation: There is no subset with sum 30.

class Solution{   
public:
    bool fun(int index,int target,vector<int>&arr,vector<vector<int>>&dp){
        // base cases
        if(target==0) return true;
        if(index==0) return arr[index]==target;
        
        // dp condition check
        if(dp[index][target]!=-1) return dp[index][target];
        
        // conditions
        bool notTake=fun(index-1,target,arr,dp);
        bool take=false;
        if(target>=arr[index]){
            take=fun(index-1,target-arr[index],arr,dp);
        }
        return dp[index][target]=notTake || take;
    }

    bool isSubsetSum(vector<int>arr, int sum){
        int n=arr.size();
        vector<vector<int>>dp(n,vector<int>(sum+1,-1));
        return fun(n-1,sum,arr,dp);
    }
};
