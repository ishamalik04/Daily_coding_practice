You are given an integer array nums and an integer target.
You want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.
For example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression "+2-1".
Return the number of different expressions that you can build, which evaluates to target.

 
Example 1:
Input: nums = [1,1,1,1,1], target = 3
Output: 5
Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3.
-1 + 1 + 1 + 1 + 1 = 3
+1 - 1 + 1 + 1 + 1 = 3
+1 + 1 - 1 + 1 + 1 = 3
+1 + 1 + 1 - 1 + 1 = 3
+1 + 1 + 1 + 1 - 1 = 3

Example 2:
Input: nums = [1], target = 1
Output: 1

class Solution {
public:
    const long long mod = 1e9+7;
    int fun(int index,int target,vector<int>&arr,vector<vector<int>>&dp){
	    if(index==0){
	    if(target==0 && arr[0]==0) return 2;
	    if(target==0 || arr[0]==target) return 1;
	    
	    return 0;
	    }
	    
	    if(dp[index][target]!=-1) return dp[index][target];
	    
	    int notTake=(fun(index-1,target,arr,dp))%mod;
	    int take=false;
	    if(arr[index]<=target){
	        take=fun(index-1,target-arr[index],arr,dp)%mod;
	    }
	    
	    return dp[index][target]=(take+notTake)%mod;
	}
	int perfectSum(vector<int>& arr, int n, int sum)
	{
        vector<vector<int>>dp(n,vector<int>(sum+1,-1));
        return fun(n-1,sum,arr,dp);
	}
    int countPartitions(int n, int d, vector<int>& arr) {
        int totalSum=0;
        for(auto it:arr)
        totalSum+=it;
        
        if(totalSum-d<0 || (totalSum-d)%2)
        return 0;
        
        return perfectSum(arr,n,(totalSum-d)/2);
    }
    int findTargetSumWays(vector<int>& nums, int target) {
        return countPartitions(nums.size(),target,nums);
    }
};
