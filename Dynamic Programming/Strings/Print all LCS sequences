You are given two strings s and t. Now your task is to print all longest common sub-sequences in lexicographical order.
Note -  A Sub-sequence is derived from another string by deleting some or none of the elements without changing the order of the remaining elements.


Example 1:
Input: s = abaaa, t = baabaca
Output: aaaa abaa baaa
Explanation - Length of lcs is 4, in lexicographical order they are aaaa, abaa, baaa

Example 2:
Input: s = aaa, t = a
Output: a

class Solution {
  public:
    vector<string> all_longest_common_subsequences(string s, string t) {
        int n=s.size();
        int m=t.size();

        vector<vector<int>>dp(n+1,vector<int>(m+1,-1));
        for(int i=0;i<=n;i++)
        dp[i][0]=0;

        for(int j=0;j<=m;j++)
        dp[0][j]=0;

        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(s[i-1]==t[j-1]){
                    dp[i][j]=1+dp[i-1][j-1];
                }
                else{
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        set<string>ans;
        queue<pair<pair<int,int>,string>>q;
        q.push({{n,m},""});
        while(!q.empty()){
            int x=q.front().first.first;
            int y=q.front().first.second;
            string str=q.front().second;
            q.pop();
            if(x==0 || y==0) ans.insert(str);
            else{
                if(s[x-1]==t[y-1]){
                    q.push({{x-1,y-1},s[x-1]+str});
                }else{
                    if(dp[x-1][y] >=dp[x][y-1]) q.push({{x-1,y},str});
                    if(dp[x-1][y]<=dp[x][y-1]) q.push({{x,y-1},str});
                }
            }
        }
        return vector<string>(ans.begin(),ans.end());
    }
};
