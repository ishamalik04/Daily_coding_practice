A boolean expression is an expression that evaluates to either true or false. It can be in one of the following shapes:
't' that evaluates to true.
'f' that evaluates to false.
'!(subExpr)' that evaluates to the logical NOT of the inner expression subExpr.
'&(subExpr1, subExpr2, ..., subExprn)' that evaluates to the logical AND of the inner expressions subExpr1, subExpr2, ..., subExprn where n >= 1.
'|(subExpr1, subExpr2, ..., subExprn)' that evaluates to the logical OR of the inner expressions subExpr1, subExpr2, ..., subExprn where n >= 1.
Given a string expression that represents a boolean expression, return the evaluation of that expression.
It is guaranteed that the given expression is valid and follows the given rules.

#define l1 long long
class Solution {
public:
    bool op(char ch){
        return (ch=='&' || ch=='|' || ch=='&' ||ch=='!');
    }
    char find(int T,int F,char op){
        if(op=='!') return T?'f':'t';
        else if(op=='|') return T?'t':'f';
        else if(op=='&') return F?'f':'t';
        return 'a';
    }
    bool parseBoolExpr(string exp) {
        int n=exp.size();
        stack<char>st;
        for(int i=0;i<n;i++){
            if(exp[i]==',') continue;

            if(op(exp[i]) || exp[i]=='t' || exp[i]=='f'|| exp[i]=='(')
            st.push(exp[i]);
            else if(exp[i]==')'){
                int T=0,F=0;
                char op;
                while(st.size() && st.top()!='('){
                    if(st.top()=='t') T++;
                    else if(st.top()=='f') F++;
                    st.pop();
                }
                st.pop();
                op=st.top();st.pop();
                st.push(find(T,F,op));
            }
        }
        return st.top()=='t'?true:false;
    }
};
