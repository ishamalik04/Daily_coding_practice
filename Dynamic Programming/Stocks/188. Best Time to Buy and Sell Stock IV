You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.
Find the maximum profit you can achieve. You may complete at most k transactions: i.e. you may buy at most k times and sell at most k times.
Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

Example 1:
Input: k = 2, prices = [2,4,1]
Output: 2
Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.

Example 2:
Input: k = 2, prices = [3,2,6,5,0,3]
Output: 7
Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.

class Solution {
public:
    int f(int n,int index,int buy,int cap,vector<int>&prices,vector<vector<vector<int>>>&dp){
        if(cap==0) return 0;
        if(index==n) return 0;
        if(dp[index][buy][cap]!=-1) return dp[index][buy][cap];
        int profit=0;
        if(buy){
            profit=max(-prices[index]+f(n,index+1,0,cap,prices,dp),0+f(n,index+1,1,cap,prices,dp));
        }
        else{
            profit=max(prices[index]+f(n,index+1,1,cap-1,prices,dp),0+f(n,index+1,0,cap,prices,dp));
        }
        return dp[index][buy][cap]=profit;
    }
    int maxProfit(int k, vector<int>& prices) {
        vector<vector<vector<int>>>dp(prices.size()+1,vector<vector<int>>(2,vector<int>(k+1,-1)));
        return f(prices.size(),0,1,k,prices,dp);
    }
};
