You are given an array prices where prices[i] is the price of a given stock on the ith day.
Find the maximum profit you can achieve. You may complete at most two transactions.
Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

Example 1:
Input: prices = [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.

Example 2:
Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.

class Solution {
public:
    int f(int n,int index,int buy,int cap,vector<int>&prices,vector<vector<vector<int>>>&dp){
        if(cap==0) return 0;
        if(index==n) return 0;
        if(dp[index][buy][cap]!=-1) return dp[index][buy][cap];
        int profit=0;
        if(buy){
            profit=max(-prices[index]+f(n,index+1,0,cap,prices,dp),0+f(n,index+1,1,cap,prices,dp));
        }
        else{
            profit=max(prices[index]+f(n,index+1,1,cap-1,prices,dp),0+f(n,index+1,0,cap,prices,dp));
        }
        return dp[index][buy][cap]=profit;
    }
    int maxProfit(vector<int>& prices) {
        vector<vector<vector<int>>>dp(prices.size()+1,vector<vector<int>>(2,vector<int>(3,-1)));
        return f(prices.size(),0,1,2,prices,dp);
    }
};
