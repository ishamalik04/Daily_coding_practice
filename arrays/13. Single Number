Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.
Example 1:

Input: nums = [2,2,1]
Output: 1
Example 2:

Input: nums = [4,1,2,1,2]
Output: 4

solution1.
class Solution {
public:
    int singleNumber(vector<int>& arr) {
         int n = arr.size();
    map<int, int> mpp;
    for (int i = 0; i < n; i++) {
        mpp[arr[i]]++;
    }

    for (auto it : mpp) {
        if (it.second == 1)
            return it.first;
    }
    return -1;
    }
};
//Time Complexity - O(N*logM)+)(M) , m is the size of map . M=(n/2)+1. and n is size of array
//Space complexity - O(M)

solution2.
class Solution {
public:
    int singleNumber(vector<int>& arr) {
        int n = arr.size();
        int xor1=0;
        for(int i=0;i<n;i++){
            xor1^=arr[i];
        }
        return xor1;
    }
};
//Time complexity - O(N)
// Space complexity - O(1)
