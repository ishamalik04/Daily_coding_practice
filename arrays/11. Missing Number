Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.
Example 1:
Input: nums = [3,0,1]
Output: 2
Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.
Example 2:
Input: nums = [0,1]
Output: 2
Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.


Solution1.
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int n=nums.size();
        long long sum1=(n*(n+1))/2;
        long long sum2=0;
        for(int i=0;i<n;i++){
            sum2+=nums[i];
        }
        return sum1-sum2;
    }
};

Time Complexity - O(N)
Space Complexity - O(1)


Solution2.
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int x=nums.size();
        int ans=x;
       int xor1=0,xor2=0;
       for(int i=0;i<x;i++){
        ans^=i;
        ans^=nums[i];
       }
       return ans;
    }
};
Time Complexity - O(N)
Space Complexity - O(1)
