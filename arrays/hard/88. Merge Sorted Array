You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.
Merge nums1 and nums2 into a single array sorted in non-decreasing order.
The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this,
nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

Example 1:

Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.
Example 2:

Input: nums1 = [1], m = 1, nums2 = [], n = 0
Output: [1]
Explanation: The arrays we are merging are [1] and [].
The result of the merge is [1].

class Solution {
public:

    void swapIfGreater(vector<int>&nums1,vector<int>&nums2,int i,int j){
        if(nums1[i]>nums2[j]){
            swap(nums1[i],nums2[j]);
        }
    }
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {

        // better
        int diff=nums1.size()-nums2.size();
        int left=diff-1;
        int right=0;
        while(left>=0 && right<n){
            if(nums1[left]> nums2[right]){
                swap(nums1[left],nums2[right]);
                left--;
                right++;
            }
            else{
                break;
            }
        }
        sort(nums1.begin(), nums1.begin() + m); 
        sort(nums2.begin(), nums2.begin() + n);
        for(int i=0;i<n;i++){
            nums1[i+diff]=nums2[i];
        }

        // optimal using shell sort
        int length=n+m;
        int gap=(length/2)+(length%2);
        while(gap>0){
            int left=0;
            int right=left+gap;
            while(right<length){
                if(left<m && right>=m){
                    swapIfGreater(nums1,nums2,left,right-m);
                }
                else if(left>=m){
                    swapIfGreater(nums2,nums2,left-m,right-m);
                }
                else{
                    swapIfGreater(nums1,nums1,left,right);
                }
                left++;
                right++;
            }
            if(gap==1) break;
            gap=(gap/2)+(gap%2);
        }

        int ind=0;
        for(int i=m;i<n+m;i++){
            nums1[i]=nums2[ind++];
        }
    }
};
