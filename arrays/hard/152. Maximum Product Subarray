Given an integer array nums, find a subarray that has the largest product, and return the product.
The test cases are generated so that the answer will fit in a 32-bit integer.

 

Example 1:

Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.
Example 2:

Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.

  class Solution {
public:
    int maxProduct(vector<int>& nums) {
        // brute force
        int n=nums.size();
        int prod=1,maxi=INT_MIN;
        for(int i=0;i<n;i++){
            prod=1;
            for(int j=i;j<n;j++){
                prod*=nums[j];
                maxi=max(maxi,prod);
            }
        }
        // return maxi;


        // optimal
        int n=nums.size();
        int suff=1,pre=1;
        int ans=INT_MIN;
        for(int i=0;i<n;i++){
            if(pre==0) pre=1;
            if(suff==0) suff=1;
            pre=pre*nums[i];
            suff=suff*nums[n-i-1];
            ans=max({ans,pre,suff});
        }
        return ans;
    }

};
