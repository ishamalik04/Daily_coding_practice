Given an array of integers. Find the Inversion Count in the array.  Two array elements arr[i] and arr[j] form an inversion if arr[i] > arr[j] and i < j.
Inversion Count: For an array, inversion count indicates how far (or close) the array is from being sorted. If the array is already sorted then the inversion count is 0.
If an array is sorted in the reverse order then the inversion count is the maximum. 

Examples:

Input: n = 5, arr[] = {2, 4, 1, 3, 5}
Output: 3
Explanation: The sequence 2, 4, 1, 3, 5 has three inversions (2, 1), (4, 1), (4, 3).
Input: n = 5, arr[] = {2, 3, 4, 5, 6}
Output: 0
Explanation: As the sequence is already sorted so there is no inversion count.

  long long merge(long long arr[],long long temp[],int low,int mid,int high){
    long long left=low;
    long long right=mid+1;
    long long k=low;
    long long cnt=0;
    while(left<=mid && right<=high){
        if(arr[left]<=arr[right]){
            temp[k++]=arr[left];
            left++;
        }
        else{
            temp[k++]=arr[right];
            cnt+=(mid-left+1);
            right++;
        }
    }
    while(left<=mid){
        temp[k++]=arr[left];
        left++;
    }
    while(right<=high){
        temp[k++]=arr[right];
        right++;
    }
    for(int i=low;i<=high;i++){
        arr[i]=temp[i];
    }
    return cnt;
}

long long mergesort(long long arr[],long long temp[],int low,int high){
    long long cnt=0;
    if(low>=high) return cnt;
    int mid=(low+high)/2;
    cnt+=mergesort(arr,temp,low,mid);
    cnt+=mergesort(arr,temp,mid+1,high);
    cnt+=merge(arr,temp,low,mid,high);
    return cnt;
}

long long int inversionCount(long long arr[], long long n) {
    // brute force
    long long cnt=0;
    for(int i=0;i<n;i++){
        for(int j=i+1;j<n;j++){
            if(arr[i]>arr[j]){
                cnt++;
            }
        }
    }
    return cnt;

// optimal
  long long temp[n];
    return mergesort(arr,temp,0,n-1);
}
