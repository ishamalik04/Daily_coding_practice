Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

Example 1:

Input: nums = [3,2,3]
Output: [3]
Example 2:

Input: nums = [1]
Output: [1]

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        // brute force
        int n=nums.size();
        vector<int>list;
        for(int i=0;i<n;i++){
            if(list.size()==0 || list[0]!=nums[i]){
                int cnt=0;
                for(int j=0;j<n;j++){
                    if(nums[j]==nums[i]){
                        cnt++;
                    }
                }
                if(cnt>n/3){
                    list.push_back(nums[i]);
                }
            }
            if(list.size()==2) break;
        }
        return list;

        // better
        int n=nums.size();
        vector<int>ans;
        map<int,int>mpp;
        int mini=int(n/3)+1;
        for(int i=0;i<n;i++){
            mpp[nums[i]]++;

            // checking if the element is the majority element
            if(mpp[nums[i]]==mini){
                ans.push_back(nums[i]);
            }
            if(ans.size()==2) break;
        }
        return ans;

        // optimal
        int n=nums.size();
        int cnt1=0,cnt2=0;
        int el1=INT_MIN,el2=INT_MIN;

        // moore's voting algo
        for(int i=0;i<n;i++){
            if(cnt1==0 && el2!=nums[i]){
                cnt1=1;
                el1=nums[i];
            }
            else if(cnt2==0 && el1!=nums[i]){
                cnt2=1;
                el2=nums[i];
            }
            else if(nums[i]==el1) cnt1++;
            else if(nums[i]==el2) cnt2++;
            else{
                cnt1--;
                cnt2--;
            }
        }
        vector<int>ans;
        cnt1=0,cnt2=0;
        for(int i=0;i<n;i++){
            if(nums[i]==el1) cnt1++;
            if(nums[i]==el2) cnt2++;
        }
        int mini=int(n/3)+1;
        if(cnt1>=mini) ans.push_back(el1);
        if(cnt2>=mini) ans.push_back(el2);
        return ans;
    }
};

