Given an array having both positive and negative integers. The task is to compute the length of the largest subarray with sum 0.
Examples:
Input: arr[] = {15,-2,2,-8,1,7,10,23}, n = 8
Output: 5
Explanation: The largest subarray with sum 0 is -2 2 -8 1 7.
Input: arr[] = {2,10,4}, n = 3
Output: 0
Explanation: There is no subarray with 0 sum.

class Solution {
  public:
    int maxLen(vector<int>& arr, int n) {
        // Your code here
        // brute force
        int maxi=0,sum=0;
        for(int i=0;i<n;i++){
            sum=0;
            for(int j=i;j<n;j++){
                sum+=arr[j];
                if(sum==0){
                    maxi=max(maxi,j-i+1);
                }
            }
        }
        return maxi;
        
        
        // optimal 
        int sum=0,maxi=0;
        unordered_map<int,int>mpp;
        for(int i=0;i<n;i++){
            sum+=arr[i];
            if(sum==0){
                maxi=i+1;
            }
            else{
                if(mpp.find(sum)!=mpp.end()){
                    maxi=max(maxi,i-mpp[sum]);
                }
                else{
                    mpp[sum]=i;
                }
            }
        }
        return maxi;
    }
};
