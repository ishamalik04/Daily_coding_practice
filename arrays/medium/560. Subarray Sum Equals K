Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.
A subarray is a contiguous non-empty sequence of elements within an array
 

Example 1:

Input: nums = [1,1,1], k = 2
Output: 2
Example 2:

Input: nums = [1,2,3], k = 3
Output: 2

class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int n=nums.size();
        // brute force
        int cnt=0;

        for(int i=0;i<n;i++){
            int sum=0;
            for(int j=i;j<n;j++){
                sum+=nums[j];
                if(sum==k){
                    cnt++;
                }
            }
        }
        return cnt;


        // optimal
        map<int,int>mpp;
        mpp[0]=1;
        int cnt=0,preSum=0;
        for(int i=0;i<n;i++){
            preSum+=nums[i];
            int left=preSum-k;
            cnt+=mpp[left];
            mpp[preSum]+=1;
        }
        return cnt;
    }
};
