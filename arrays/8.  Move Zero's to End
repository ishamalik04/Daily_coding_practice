Problem statement
Given an array 'arr' of 'n' non-negative integers, your task is to move all the zeros to the end of the array while keeping the non-zero elements at the start of the array in their original order. Return the modified array.



Example :
Input: ‘n’ = 5, ‘arr’ = [1, 2, 0, 0, 2, 3]
Output: [1, 2, 2, 3, 0, 0]

Explanation: Moved all the 0’s to the end of an array, and the rest of the elements retain the order at the start.

vector<int> moveZeros(int n, vector<int> a) {
  // Write your code here.
  // Brute force
  //   Time Complexity - O(2N)
  //   Space complexity -O(x)
  /* vector<int> temp;
  for (int i = 0; i < n; i++){
      if(a[i]!=0){
          temp.push_back(a[i]);
      }
  }

  for(int i=0;i<temp.size();i++){
      a[i]=temp[i];
  }
  for(int i=temp.size();i<n;i++){
      a[i]=0;
  }
  return a;*/

  // Optimal approach 
  //Time complexiy -O(N)
  //Space complexity -O(1)

  int j=-1;
  for(int i=0;i<n;i++){
      if(a[i]==0)
      {
          j=i;
          break;
      }
  }
  if(j==-1) return a;

  for(int i=j+1;i<n;i++){
      if(a[i]!=0){
          swap(a[i],a[j]);
          j++;
      }
  }
  return a;
}
