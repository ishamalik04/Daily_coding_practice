Given a string s consisting only of characters a, b and c.
Return the number of substrings containing at least one occurrence of all these characters a, b and c.

Example 1:
Input: s = "abcabc"
Output: 10
Explanation: The substrings containing at least one occurrence of the characters a, b and c are "abc", "abca", "abcab", "abcabc", "bca", "bcab", "bcabc", "cab", "cabc" and "abc" (again). 

Example 2:
Input: s = "aaacb"
Output: 3
Explanation: The substrings containing at least one occurrence of the characters a, b and c are "aaacb", "aacb" and "acb".

class Solution {
public:
    int numberOfSubstrings(string s) {
        // brute - trying all substrings
        int cnt=0,n=s.size();
        for(int i=0;i<n;i++){
            int hash[3]={0,0,0};
            for(int j=i;j<n;j++){
                hash[s[j]-'a']=1;
                if(hash[0]+hash[1]+hash[2]==3){
                    cnt+=(n-j);
                    break;
                }
            }
        }
        return cnt;


        // better
        int cnt=0,n=s.size();
        int lastSeen[3]={-1,-1,-1};
        for(int i=0;i<n;i++){
            lastSeen[s[i]-'a']=i;
            if(lastSeen[0]!=-1 && lastSeen[1]!=-1 && lastSeen[2]!=-1){
                cnt+=(1+min(lastSeen[0],min(lastSeen[1],lastSeen[2])));
            }
        }
        return cnt;
    }
};
