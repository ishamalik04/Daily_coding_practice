Given an integer array nums and an integer k, return the number of good subarrays of nums.
A good array is an array where the number of different integers in that array is exactly k.
For example, [1,2,3,1,2] has 3 different integers: 1, 2, and 3.
A subarray is a contiguous part of an array.

 

Example 1:
Input: nums = [1,2,1,2,3], k = 2
Output: 7
Explanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2]
Example 2:

Input: nums = [1,2,1,3,4], k = 3
Output: 3
Explanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].

class Solution {
public:

    int func(vector<int>&nums,int k){
        int left=0,right=0,cnt=0,n=nums.size();
        if(k<0) return 0;
        unordered_map<int,int>mpp;
        while(right<n){
            mpp[nums[right]]++;
            while(left<=right && mpp.size()>k){
                mpp[nums[left]]--;
                if(mpp[nums[left]]==0) mpp.erase(nums[left]);
                left++;
            }
            cnt+=(right-left+1);
            right++;
        }
        return cnt;
    }
    int subarraysWithKDistinct(vector<int>& nums, int k) {
        // brute - generate all subarrays
        int n=nums.size();
        int cnt=0;
        for(int i=0;i<n;i++){
            map<int,int>mpp;
            for(int j=i;j<n;j++){
                mpp[nums[j]]++;
                if(mpp.size()==k) cnt++;
                else if(mpp.size()>k) break;
            }
        }
        return cnt;

        // better
        return func(nums,k)-func(nums,k-1);
    }
};
