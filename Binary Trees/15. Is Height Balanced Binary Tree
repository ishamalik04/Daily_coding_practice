Problem statement
You are given the root node of a binary tree.
Return 'true' if it is a height balanced binary tree.
Note:
Height of a tree is the maximum number of nodes in a path from the node to the leaf node.

An empty tree is a height-balanced tree. A non-empty binary tree is a height-balanced binary tree if
1. The left subtree of a binary tree is already the height-balanced tree.
2. The right subtree of a binary tree is also the height-balanced tree.
3. The difference between heights of left subtree and right subtree must not more than ‘1’.

pair<int,int>balanced(TreeNode<int>*root){
    if(root==NULL){
        pair<bool,int>p=make_pair(true,0);
        return p;
    }
    pair<bool,int>left=balanced(root->left);
    pair<bool,int>right=balanced(root->right);
    pair<bool,int>ans;
    bool diff=abs(left.second-right.second)<=1;
    ans.second=max(left.second,right.second)+1;
    if(left.first&&right.first&&diff){
        ans.first=true;
    }else{
        ans.first=false;
    }
    return ans;
}

bool isBalancedBT(TreeNode<int> *root) {
    return balanced(root).first;
}

