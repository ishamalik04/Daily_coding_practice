Problem statement
You have been given the preorder and inorder traversal of a binary tree. Your task is to construct a binary tree using the given inorder and preorder traversals.
Note:
You may assume that duplicates do not exist in the given traversals.

void createMapping(vector<int> inorder,map<int,int>&nodeToIndex,int n){
    for(int i=0;i<n;i++){
        nodeToIndex[inorder[i]]=i;
    }
}

TreeNode<int>* solve(vector<int> &inorder,vector<int> &preorder,int& index,int start,int end,int n,map<int,int>& nodeToIndex){
    if(index>=n || start>end){
        return NULL;
    }
    int element=preorder[index++];
    TreeNode<int>*root=new TreeNode<int>(element);
    int position=nodeToIndex[element];
    root->left=solve(inorder,preorder,index,start,position-1,n,nodeToIndex);
    root->right=solve(inorder,preorder,index,position+1,end,n,nodeToIndex);
    return root;
}
TreeNode<int> *buildBinaryTree(vector<int> &inorder, vector<int> &preorder)
{
    int n=inorder.size();
	int preIndex=0;
    map<int,int>nodeToIndex;
    createMapping(inorder,nodeToIndex,n);
    TreeNode<int>* ans=solve(inorder,preorder,preIndex,0,n-1,n,nodeToIndex);
    return ans;
}
