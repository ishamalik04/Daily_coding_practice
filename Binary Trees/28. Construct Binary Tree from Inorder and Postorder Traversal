Problem statement
You are given arrays 'inOrder' and 'postOrder', which represent 'inorder' traversal and 'postorder' traversal of a 'Binary Tree' respectively.
Construct a 'Binary Tree' represented by the given arrays and return it's head.
Note:
Assume that the Binary Tree contains only unique elements.

#include<bits/stdc++.h>
void createMapping(vector<int> inorder,map<int,int>&nodeToIndex,int n){
    for(int i=0;i<n;i++){
        nodeToIndex[inorder[i]]=i;
    }
}

TreeNode<int>* solve(vector<int> &inorder,vector<int> &postorder,int& index,int start,int end,int n,map<int,int>& nodeToIndex){
    if(index<0 || start>end){
        return NULL;
    }
    int element=postorder[index--];
    TreeNode<int>*root=new TreeNode<int>(element);
    int position=nodeToIndex[element];
    root->right=solve(inorder,postorder,index,position+1,end,n,nodeToIndex);
    root->left=solve(inorder,postorder,index,start,position-1,n,nodeToIndex);
    return root;
}
TreeNode<int>* getTreeFromPostorderAndInorder(vector<int>& postOrder, vector<int>& inOrder){
	int n=inOrder.size();
	int postIndex=n-1;
    map<int,int>nodeToIndex;
    createMapping(inOrder,nodeToIndex,n);
    TreeNode<int>* ans=solve(inOrder,postOrder,postIndex,0,n-1,n,nodeToIndex);
    return ans;
}
