// N stacks in an array 

/*
top[]=represent index of top element
next[]=point to next element after stack top (if arr[i] stores an element ) else point to next free space 
-> algo for push 
   ->find index (index=freespot)
   ->update freespot (freespot=next=[index])
   ->insert in array (arr[index]=x)
   ->update next (next[index]=top[m-1])
   ->update top (top[m-1]=index)  */
   
class Nstack{
    int *arr;
    int *top;
    int *next;
    int n,s;
    int freespot;
    
    public:
    
    Nstack(int N,int S)
    {
        n=N;
        s=S;
        arr=new int[S];
        top=new int[N];
        //initialise top
        for(int i=0;i<n;i++)
        {
            top[i]=-1;
        }
        //initialise next 
        for(int i=0;i<s;i++)
        {
            next[i]=i+1;
        }
        
        //update last index to -1 
        next[s-1]=-1;
        freespot=0;
    }
    
    bool push(int x,int m)
    {
        //checking for overflow 
        if(freespot==-1)
        {
            return false;
        }
        
        //find index 
        int index=freespot;
        //update freespot
        freespot=next[index];
        //insert element 
        arr[index]=x;
        //update next 
        next[index]=top[m-1];
        //update top
        top[m-1]=index;
        return true;
    }
    
    int pop(int m)
    {
        //check for underflow 
        if(top[m-1]==-1)
        {
            return -1;
        }
        //moving in reverse way of push 
        int index=top[m-1];
        top[m-1]=next[index];
        freespot=index;
        return arr[index];
    }
    
};















