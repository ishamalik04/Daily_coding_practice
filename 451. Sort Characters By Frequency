Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string.

Return the sorted string. If there are multiple answers, return any of them.

 

Example 1:

Input: s = "tree"
Output: "eert"
Explanation: 'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
Example 2:

Input: s = "cccaaa"
Output: "aaaccc"
Explanation: Both 'c' and 'a' appear three times, so both "cccaaa" and "aaaccc" are valid answers.
Note that "cacaca" is incorrect, as the same characters must be together.

class Solution {
public:
    string frequencySort(string s) {
        unordered_map<char,int>mp;
        int n=s.length();
        for(int i=0;i<n;i++)
        {
            mp[s[i]]++;
        }
        priority_queue<pair<int,int>>pq;
        for(auto i:mp)
        {
            pq.push({i.second,i.first});
        }
        string temp="";
        while(!pq.empty())
        {
            int freq=pq.top().first;
            char e=pq.top().second;
            for(int i=0;i<freq;i++)
            {
                temp+=e;
            }
            pq.pop();
        }
        return temp;
    }
};
