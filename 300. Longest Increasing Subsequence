Given an integer array nums, return the length of the longest strictly increasing 
subsequence
.

 

Example 1:

Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.
Example 2:

Input: nums = [0,1,0,3,2,3]
Output: 4


class Solution {
public:
int func(int ind, vector<int>&nums, vector<int>&dp)
{
    if(dp[ind]!=-1)
    return dp[ind];
    int ans=1;
    for(int j=0;j<ind;j++)
    {
        if (nums[ind]>nums[j])
        {
            ans=max(ans,func(j,nums,dp)+1);
        }
    }
    return dp[ind]=ans;
}
    int lengthOfLIS(vector<int>& nums) {
       /* vector<int>dp(nums.size()+1,-1);
        int ans=0;
        for(int i=0;i<nums.size();i++)
        {
            ans=max(ans,func(i,nums,dp));
        }
        return ans;*/

        // using binary search for TC=O(nlogn)
        vector<int>temp;
        int len=1;
        temp.push_back(nums[0]);
        for(int i=1;i<nums.size();i++)
        {
            if(nums[i]>temp.back())
            {
                temp.push_back(nums[i]);
                len++;
            }
            else
            {
                int ind=lower_bound(temp.begin(),temp.end(),nums[i])-temp.begin();
                temp[ind]=nums[i];
            }
        }
        return temp.size();
    }
};
